# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type ContentSnippet {
  id: ID!
  title: String
  status: String
  content: ContentSnippet_content_Document
  publishDate: DateTime
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
}

type ContentSnippet_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ContentSnippetWhereUniqueInput {
  id: ID
}

input ContentSnippetWhereInput {
  AND: [ContentSnippetWhereInput!]
  OR: [ContentSnippetWhereInput!]
  NOT: [ContentSnippetWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  pages: PageManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PageManyRelationFilter {
  every: PageWhereInput
  some: PageWhereInput
  none: PageWhereInput
}

input ContentSnippetOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ContentSnippetUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  pages: PageRelateToManyForUpdateInput
}

input PageRelateToManyForUpdateInput {
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input ContentSnippetUpdateArgs {
  where: ContentSnippetWhereUniqueInput!
  data: ContentSnippetUpdateInput!
}

input ContentSnippetCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  pages: PageRelateToManyForCreateInput
}

input PageRelateToManyForCreateInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

type Page {
  id: ID!
  title: String
  content: Page_content_Document
  publishDate: DateTime
  snippets(
    where: ContentSnippetWhereInput! = {}
    orderBy: [ContentSnippetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContentSnippet!]
  snippetsCount(where: ContentSnippetWhereInput! = {}): Int
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  publishDate: DateTimeNullableFilter
  snippets: ContentSnippetManyRelationFilter
}

input ContentSnippetManyRelationFilter {
  every: ContentSnippetWhereInput
  some: ContentSnippetWhereInput
  none: ContentSnippetWhereInput
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publishDate: OrderDirection
}

input PageUpdateInput {
  title: String
  content: JSON
  publishDate: DateTime
  snippets: ContentSnippetRelateToManyForUpdateInput
}

input ContentSnippetRelateToManyForUpdateInput {
  disconnect: [ContentSnippetWhereUniqueInput!]
  set: [ContentSnippetWhereUniqueInput!]
  create: [ContentSnippetCreateInput!]
  connect: [ContentSnippetWhereUniqueInput!]
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  content: JSON
  publishDate: DateTime
  snippets: ContentSnippetRelateToManyForCreateInput
}

input ContentSnippetRelateToManyForCreateInput {
  create: [ContentSnippetCreateInput!]
  connect: [ContentSnippetWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: RoleWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  accessibleLists(
    where: ListKeyWhereInput! = {}
    orderBy: [ListKeyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ListKey!]
  accessibleListsCount(where: ListKeyWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  users: UserManyRelationFilter
  accessibleLists: ListKeyManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ListKeyManyRelationFilter {
  every: ListKeyWhereInput
  some: ListKeyWhereInput
  none: ListKeyWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input RoleUpdateInput {
  name: String
  users: UserRelateToManyForUpdateInput
  accessibleLists: ListKeyRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ListKeyRelateToManyForUpdateInput {
  disconnect: [ListKeyWhereUniqueInput!]
  set: [ListKeyWhereUniqueInput!]
  create: [ListKeyCreateInput!]
  connect: [ListKeyWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  users: UserRelateToManyForCreateInput
  accessibleLists: ListKeyRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ListKeyRelateToManyForCreateInput {
  create: [ListKeyCreateInput!]
  connect: [ListKeyWhereUniqueInput!]
}

type ListKey {
  id: ID!
  key: String
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
}

input ListKeyWhereUniqueInput {
  id: ID
  key: String
}

input ListKeyWhereInput {
  AND: [ListKeyWhereInput!]
  OR: [ListKeyWhereInput!]
  NOT: [ListKeyWhereInput!]
  id: IDFilter
  key: StringFilter
  roles: RoleManyRelationFilter
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input ListKeyOrderByInput {
  id: OrderDirection
  key: OrderDirection
}

input ListKeyUpdateInput {
  key: String
  roles: RoleRelateToManyForUpdateInput
}

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input ListKeyUpdateArgs {
  where: ListKeyWhereUniqueInput!
  data: ListKeyUpdateInput!
}

input ListKeyCreateInput {
  key: String
  roles: RoleRelateToManyForCreateInput
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createContentSnippet(data: ContentSnippetCreateInput!): ContentSnippet
  createContentSnippets(data: [ContentSnippetCreateInput!]!): [ContentSnippet]
  updateContentSnippet(
    where: ContentSnippetWhereUniqueInput!
    data: ContentSnippetUpdateInput!
  ): ContentSnippet
  updateContentSnippets(data: [ContentSnippetUpdateArgs!]!): [ContentSnippet]
  deleteContentSnippet(where: ContentSnippetWhereUniqueInput!): ContentSnippet
  deleteContentSnippets(
    where: [ContentSnippetWhereUniqueInput!]!
  ): [ContentSnippet]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createListKey(data: ListKeyCreateInput!): ListKey
  createListKeys(data: [ListKeyCreateInput!]!): [ListKey]
  updateListKey(
    where: ListKeyWhereUniqueInput!
    data: ListKeyUpdateInput!
  ): ListKey
  updateListKeys(data: [ListKeyUpdateArgs!]!): [ListKey]
  deleteListKey(where: ListKeyWhereUniqueInput!): ListKey
  deleteListKeys(where: [ListKeyWhereUniqueInput!]!): [ListKey]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  contentSnippets(
    where: ContentSnippetWhereInput! = {}
    orderBy: [ContentSnippetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContentSnippet!]
  contentSnippet(where: ContentSnippetWhereUniqueInput!): ContentSnippet
  contentSnippetsCount(where: ContentSnippetWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  listKeys(
    where: ListKeyWhereInput! = {}
    orderBy: [ListKeyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ListKey!]
  listKey(where: ListKeyWhereUniqueInput!): ListKey
  listKeysCount(where: ListKeyWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
